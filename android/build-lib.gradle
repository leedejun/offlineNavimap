buildscript {
  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.6.0'
  }
}

allprojects {
  repositories {
    mavenCentral()
    maven{ url'https://maven.aliyun.com/repository/google' }
    maven{ url'https://maven.aliyun.com/repository/public' }
  }
}

repositories {
  maven { url 'https://www.jitpack.io' }
  maven { url 'https://maven.google.com' }
  maven { url 'https://dl.bintray.com/google/flexbox-layout/' }
  maven { url 'https://dl.bintray.com/google/exoplayer/' }
}

//apply plugin: 'com.android.application'
apply plugin: 'com.android.library'
apply from: 'secure.properties'

dependencies {

  implementation 'androidx.multidex:multidex:' + propMultiDexVersion
  implementation 'com.google.code.gson:gson:2.6.1'
  implementation 'net.jcip:jcip-annotations:1.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation 'com.google.android:flexbox:1.0.0'
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
  implementation 'androidx.preference:preference:1.1.0'
  implementation 'androidx.fragment:fragment:1.1.0'
}

def getDate() {
  def date = new Date()
  def formattedDate = date.format('yyMMdd')
  return formattedDate
}

def osName = System.properties['os.name'].toLowerCase()

project.ext.versionCodes = ['armeabi-v7a': 30, 'x86': 40, 'arm64-v8a': 50, 'x86_64' : 60]
//project.ext.appId = 'com.mapswithme.maps.pro'

configurations.all {
  if (it.getName().contains("lint"))
    return

  resolutionStrategy {
    force 'com.android.support:multidex:' + propMultiDexVersion
    force 'android.arch.core:runtime:1.1.1'
    force 'android.arch.core:common:1.1.1'
    force 'androidx.legacy:legacy-support-core-utils:1.0.0-rc01'
    force 'androidx.loader:loader:1.0.0-rc01'
    force 'androidx.lifecycle:lifecycle-viewmodel:2.1.0'
    force 'androidx.lifecycle:lifecycle-common:2.1.0'
    force 'androidx.arch.core:core-common:2.0.0-rc01'
    force 'androidx.arch.core:core-runtime:2.0.0-rc01'
    force 'androidx.lifecycle:lifecycle-runtime:2.1.0'
    force 'androidx.lifecycle:lifecycle-livedata-core:2.1.0'
    force 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    force "org.jetbrains.kotlin:kotlin-stdlib:1.3.31"
    force "com.google.code.gson:gson:2.8.5"
    force "com.google.guava:guava:27.0.1-jre"
    force "com.android.installreferrer:installreferrer:1.1"
    force "com.google.android.material:material:1.1.0"
    force "androidx.constraintlayout:constraintlayout:1.1.3"
    force "androidx.vectordrawable:vectordrawable:1.1.0"
    force "androidx.coordinatorlayout:coordinatorlayout:1.1.0"
    force "androidx.collection:collection:1.1.0"
    force "androidx.fragment:fragment:1.1.0"
    force "androidx.preference:preference:1.1.0"
    force "androidx.appcompat:appcompat:1.1.0"
    force "androidx.annotation:annotation:1.1.0"
    force "androidx.core:core:1.1.0"
    force "androidx.versionedparcelable:versionedparcelable:1.1.0"
    force "androidx.recyclerview:recyclerview:1.1.0"

    failOnVersionConflict();
  }
}

android {
  ndkVersion = "21.3.6528147"
  dataBinding {
    enabled = true
  }
  // All properties are read from gradle.properties file
  compileSdkVersion propCompileSdkVersion.toInteger()

  defaultConfig {
    vectorDrawables.useSupportLibrary = true
    // Default package name is taken from the manifest and should be com.mapswithme.maps
    versionCode propVersionCode.toInteger()
    versionName propVersionName
    minSdkVersion propMinSdkVersion.toInteger()
    targetSdkVersion propTargetSdkVersion.toInteger()
    multiDexEnabled true
    multiDexKeepFile file('multidex-config.txt')
    externalNativeBuild {
      def pchFlag = 'OFF'
      if (project.hasProperty('pch')) pchFlag = 'ON'

      cmake {
        version "3.8.0+"
        cppFlags '-fexceptions', '-frtti', '-std=c++17'
        cFlags '-ffunction-sections', '-fdata-sections',
                '-Wno-extern-c-compat'
        arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static',
                "-DOS=$osName", '-DSKIP_TESTS=ON', "-DUSE_PCH=$pchFlag"
      }
    }

    ndk {
      abiFilters "arm64-v8a"
    }
  }

  sourceSets.main {
    manifest.srcFile 'AndroidManifest-lib.xml'
    res.srcDirs = ['res']
    java {
      srcDirs = ['src']
      setIncludes(new HashSet(['com/ftmap/maps/*.java','com/ftmap/maps/**/*.java','com/ftmap/util/**/*.java','com/ftmap/util/*.java']))
    }
    // assets folder is auto-generated by tools/android/update_assets.sh, so we keep all static resources in separate folders.
    assets.srcDirs = ['assets']
//    jniLibs.srcDirs = [android.getNdkDirectory().toString() + '/sources/third_party/vulkan/src/build-android/jniLibs']
  }

  flavorDimensions "default"

  productFlavors {
    final int HUAWEI_VERSION_CODE_BASE = 20000;
    final int TENCENT_VERSION_CODE_BASE = 10000;
    web {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Web'
      android.sourceSets.web.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }
  }

//  variantFilter { variant ->
//    if (!variant.getFlavors().get(0).name.equals("web")
//            && !variant.getFlavors().get(0).name.equals("google")
//            && !project.hasProperty("anyVariant")) {
//      println("Variant '" + variant.name + "' is ignored. If you want to build it please " +
//              "add gradle parameter '-PanyVariant'")
//      variant.setIgnore(true)
//    }
//  }

//  splits.abi {
//    boolean enabled = project.hasProperty('splitApk');
//    println ("Create separate apks: " + enabled)
//    enable enabled
//    reset()
//    include 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
//    universalApk true
//  }
//
  // TODO: Fix a lot of lint errors in our code
  lintOptions {
    abortOnError false
  }

  buildTypes {
    debug {
//      applicationIdSuffix '.debug'   // Allows to install debug and release builds together
      versionNameSuffix '-debug'
      jniDebuggable true           // Enable jni debug build
      zipAlignEnabled true
//      signingConfig signingConfigs.mapswithmeDebug
      android.sourceSets.debug.setRoot('flavors/debug')
//      resValue 'string', 'app_id', android.defaultConfig.applicationId + applicationIdSuffix
    }

    release {
//      signingConfig signingConfigs.mapswithme
//      minifyEnabled true
//      minifyEnabled true
//      shrinkResources true
//      proguardFile('proguard-mwm.txt')
    }
  }

  externalNativeBuild {
    cmake {
      version "3.8.0+"
      buildStagingDirectory "./nativeOutputs"
      path "../CMakeLists.txt"
    }
  }

  // We don't compress these extensions in assets/ because our random FileReader can't read zip-compressed files from apk.
  // TODO: Load all minor files via separate call to ReadAsString which can correctly handle compressed files in zip containers.
  aaptOptions {
    noCompress 'txt', 'bin', 'html', 'png', 'json', 'mwm', 'ttf', 'sdf', 'ui', 'config', 'csv', 'spv'
    ignoreAssetsPattern "!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'lib/armeabi/libcrashlytics.so'
    exclude 'lib/mips64/libcrashlytics.so'
    exclude 'lib/mips/libcrashlytics.so'
    exclude 'lib/armeabi/libVkLayer_core_validation.so'
    exclude 'lib/armeabi/libVkLayer_threading.so'
    exclude 'lib/armeabi/libVkLayer_image.so'
    exclude 'lib/armeabi/libVkLayer_parameter_validation.so'
    exclude 'lib/armeabi/libVkLayer_object_tracker.so'
    exclude 'lib/armeabi/libVkLayer_swapchain.so'
    exclude 'lib/armeabi/libVkLayer_unique_objects.so'
    exclude 'lib/mips64/libVkLayer_core_validation.so'
    exclude 'lib/mips64/libVkLayer_threading.so'
    exclude 'lib/mips64/libVkLayer_image.so'
    exclude 'lib/mips64/libVkLayer_parameter_validation.so'
    exclude 'lib/mips64/libVkLayer_object_tracker.so'
    exclude 'lib/mips64/libVkLayer_swapchain.so'
    exclude 'lib/mips64/libVkLayer_unique_objects.so'
    exclude 'lib/mips/libVkLayer_core_validation.so'
    exclude 'lib/mips/libVkLayer_threading.so'
    exclude 'lib/mips/libVkLayer_image.so'
    exclude 'lib/mips/libVkLayer_parameter_validation.so'
    exclude 'lib/mips/libVkLayer_object_tracker.so'
    exclude 'lib/mips/libVkLayer_swapchain.so'
    exclude 'lib/mips/libVkLayer_unique_objects.so'
  }
}

// Tasks needed to compile NDK part
apply plugin: 'base'

project.ext.PARAM_PARALLEL_TASK_COUNT = '-j' + (Runtime.runtime.availableProcessors() + 1)
project.ext.NDK_BUILD = android.getNdkDirectory().toString() + '/ndk-build'
if (System.properties['os.name'].toLowerCase().contains('windows'))
  project.ext.NDK_BUILD += ".cmd"

android.buildTypes.all { buildType ->
  def suffix = applicationIdSuffix != null ? applicationIdSuffix : "";
  def authorityValue = android.defaultConfig.applicationId + suffix + ".provider"
  def authority = "\"" + authorityValue + "\""
  buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', authority
  manifestPlaceholders += [FILE_PROVIDER_PLACEHOLDER : authorityValue]
}